/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo;

import java.util.ArrayList;
import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;

import edu.usc.polygraph.*;

public class PolygraphHelper {

    public static KafkaProducer<String, String> kafkaProducer = null;
   //public static int tid = 0;
    public static final boolean useKafka = true;
    public static int numPartitions_Demo_1=1;
    public static final char NO_READ_UPDATE = 'X';
    public static final char KEY_SEPERATOR = '-';
    public static final char RECORD_ATTRIBUTE_SEPERATOR = ',';
    public static final char ENTITY_SEPERATOR = '&';
    public static final char PROPERY_SEPERATOR = '#';
    public static final char PROPERY_ATTRIBUTE_SEPERATOR = ':';
    public static final char ENTITY_ATTRIBUTE_SEPERATOR = ';';
    public static final String ESCAPE_START_CHAR = "\\(";
    public static final String ESCAPE_END_CHAR = "\\)";

    public static final int KEY_SEPERATOR_NUM = 1;
    public static final int RECORD_ATTRIBUTE_SEPERATOR_NUM = 2;
    public static final int ENTITY_SEPERATOR_NUM = 3;
    public static final int PROPERY_SEPERATOR_NUM = 4;
    public static final int PROPERY_ATTRIBUTE_SEPERATOR_NUM = 5;
    public static final int ENTITY_ATTRIBUTE_SEPERATOR_NUM = 6;
    public static final int ESCAPE_START_NUM = 7;
    public static final int ESCAPE_END_NUM = 8;

    public static int convertStringToInt(String str) {
        int result = 0;
        for (int i = 0; i < str.length(); i++) {
            result += str.charAt(i);
        }
        return result;
    }
        public static void restartTopics(String topic, int numOfValidators, boolean multiTopics) {
		for (int i = 0; i < (multiTopics ? numOfValidators : 1); i++) {
			KafkaScripts.deleteTopic(topic + (multiTopics ? i : ""));
			KafkaScripts.deleteTopic("STATS_" + topic + (multiTopics ? i : ""));
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String result = KafkaScripts.createTopic(topic + (multiTopics ? i : ""), (multiTopics ? 2 : 2 * numOfValidators));
			if (result.equals("already exists") || result.toLowerCase().contains("error")) {
				System.out.println(result+ ". Retrying...");
				restartTopics(topic, numOfValidators, multiTopics);
			}
			if (!KafkaScripts.isTopicExist(topic)) {
				System.out.println("topic was not created. Retrying ...");
				restartTopics(topic, numOfValidators, multiTopics);

			}
		}
	}
    public static int getPartitionKey(int[] PAs) {
        int result = 0;
        for (int i = 0; i < PAs.length; i++) {
            result += PAs[i] * Math.pow(10, PAs.length - 1 - i);
        }
        return result;
    }

    public static String concatWithSeperator(char Seperator, String... params) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < params.length; i++) {
            sb.append(params[i]);
            if (i + 1 != params.length)
                sb.append(Seperator);
        }
        return sb.toString();
    }

    public static String getLogRecordString(char type, String actionName, String recordKey, long startTime, long endTime, ArrayList<Entity> entitiesArr) {
        StringBuilder sb = new StringBuilder();
        sb.append(concatWithSeperator(RECORD_ATTRIBUTE_SEPERATOR, String.valueOf(type), actionName, recordKey, String.valueOf(startTime), String.valueOf(endTime), generateEntitiesString(entitiesArr)));
        return sb.toString();
    }

    public static String generateEntitiesString(ArrayList<Entity> entities) {
        StringBuilder sb = new StringBuilder();
        try {

            String eSeperator = "";
            for (Entity e : entities) {
                if (e.getProperties().length < 1)
                    continue;
                sb.append(eSeperator);
                sb.append(concatWithSeperator(ENTITY_ATTRIBUTE_SEPERATOR, e.name, e.key));
                sb.append(ENTITY_ATTRIBUTE_SEPERATOR);
                String pSeperator = "";
                for (Property p : e.getProperties()) {
                    sb.append(pSeperator);
                    sb.append(concatWithSeperator(PROPERY_ATTRIBUTE_SEPERATOR, p.getName(), p.getValue(), String.valueOf(p.getType())));
                    pSeperator = String.valueOf(PROPERY_SEPERATOR);
                }
                eSeperator = String.valueOf(ENTITY_SEPERATOR);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace(System.out);
        }

        return sb.toString();
    }

    public static KafkaProducer<String, String> initKafkaProducer(String kafkaHostStr) {
        Properties props = new Properties();
        props.put("bootstrap.servers",kafkaHostStr );// IP:PROT, ...
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        props.put(" key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("acks", "all");
        props.put("retries", 0);
        props.put("batch.size", 16384);
        props.put("linger.ms", 1);
        props.put("buffer.memory", 33554432);
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        kafkaProducer = new KafkaProducer<String, String>(props);
        return kafkaProducer;
    }

    public static String escapeCharacters(String input) {
        input = input.replaceAll(String.valueOf(ESCAPE_START_CHAR), ESCAPE_START_CHAR + ESCAPE_START_NUM + ESCAPE_END_CHAR);
        input = input.replaceAll("(?<!\\(\\d\\d?)" + String.valueOf(ESCAPE_END_CHAR), ESCAPE_START_CHAR + ESCAPE_END_NUM + ESCAPE_END_CHAR);
        input = input.replaceAll(String.valueOf(KEY_SEPERATOR), ESCAPE_START_CHAR + KEY_SEPERATOR_NUM + ESCAPE_END_CHAR);
        input = input.replaceAll(String.valueOf(RECORD_ATTRIBUTE_SEPERATOR), ESCAPE_START_CHAR + RECORD_ATTRIBUTE_SEPERATOR_NUM + ESCAPE_END_CHAR);
        input = input.replaceAll(String.valueOf(ENTITY_SEPERATOR), ESCAPE_START_CHAR + ENTITY_SEPERATOR_NUM + ESCAPE_END_CHAR);
        input = input.replaceAll(String.valueOf(PROPERY_SEPERATOR), ESCAPE_START_CHAR + PROPERY_SEPERATOR_NUM + ESCAPE_END_CHAR);
        input = input.replaceAll(String.valueOf(PROPERY_ATTRIBUTE_SEPERATOR), ESCAPE_START_CHAR + PROPERY_ATTRIBUTE_SEPERATOR_NUM + ESCAPE_END_CHAR);
        input = input.replaceAll(String.valueOf(ENTITY_ATTRIBUTE_SEPERATOR), ESCAPE_START_CHAR + ENTITY_ATTRIBUTE_SEPERATOR_NUM + ESCAPE_END_CHAR);

        return input;
    }
    
    public static void closeKafka(){
    	if (kafkaProducer!=null){
         kafkaProducer.flush();
         kafkaProducer.close();  
    	}
    }
}

